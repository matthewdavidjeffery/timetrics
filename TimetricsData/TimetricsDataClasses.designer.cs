#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TimetricsData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TIMETRICS_DEV")]
	public partial class TimetricsDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTimerProject(TimerProject instance);
    partial void UpdateTimerProject(TimerProject instance);
    partial void DeleteTimerProject(TimerProject instance);
    partial void InsertWorkflow(Workflow instance);
    partial void UpdateWorkflow(Workflow instance);
    partial void DeleteWorkflow(Workflow instance);
    partial void InsertWorkflowTemplate(WorkflowTemplate instance);
    partial void UpdateWorkflowTemplate(WorkflowTemplate instance);
    partial void DeleteWorkflowTemplate(WorkflowTemplate instance);
    partial void InsertWorkflowTemplateToTimerTaskTemplate(WorkflowTemplateToTimerTaskTemplate instance);
    partial void UpdateWorkflowTemplateToTimerTaskTemplate(WorkflowTemplateToTimerTaskTemplate instance);
    partial void DeleteWorkflowTemplateToTimerTaskTemplate(WorkflowTemplateToTimerTaskTemplate instance);
    partial void InsertTimerTaskTemplate(TimerTaskTemplate instance);
    partial void UpdateTimerTaskTemplate(TimerTaskTemplate instance);
    partial void DeleteTimerTaskTemplate(TimerTaskTemplate instance);
    partial void InsertTimerTask(TimerTask instance);
    partial void UpdateTimerTask(TimerTask instance);
    partial void DeleteTimerTask(TimerTask instance);
    #endregion
		
		public TimetricsDataClassesDataContext() : 
				base(global::TimetricsData.Properties.Settings.Default.TIMETRICS_DEVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TimetricsDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimetricsDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimetricsDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TimetricsDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TimerProject> TimerProjects
		{
			get
			{
				return this.GetTable<TimerProject>();
			}
		}
		
		public System.Data.Linq.Table<Workflow> Workflows
		{
			get
			{
				return this.GetTable<Workflow>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowTemplate> WorkflowTemplates
		{
			get
			{
				return this.GetTable<WorkflowTemplate>();
			}
		}
		
		public System.Data.Linq.Table<WorkflowTemplateToTimerTaskTemplate> WorkflowTemplateToTimerTaskTemplates
		{
			get
			{
				return this.GetTable<WorkflowTemplateToTimerTaskTemplate>();
			}
		}
		
		public System.Data.Linq.Table<TimerTaskTemplate> TimerTaskTemplates
		{
			get
			{
				return this.GetTable<TimerTaskTemplate>();
			}
		}
		
		public System.Data.Linq.Table<TimerTask> TimerTasks
		{
			get
			{
				return this.GetTable<TimerTask>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimerProject")]
	public partial class TimerProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Workflow> _Workflows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TimerProject()
		{
			this._Workflows = new EntitySet<Workflow>(new Action<Workflow>(this.attach_Workflows), new Action<Workflow>(this.detach_Workflows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimerProject_Workflow", Storage="_Workflows", ThisKey="Id", OtherKey="ProjectId")]
		public EntitySet<Workflow> Workflows
		{
			get
			{
				return this._Workflows;
			}
			set
			{
				this._Workflows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workflows(Workflow entity)
		{
			this.SendPropertyChanging();
			entity.TimerProject = this;
		}
		
		private void detach_Workflows(Workflow entity)
		{
			this.SendPropertyChanging();
			entity.TimerProject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workflow")]
	public partial class Workflow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.Guid _ProjectId;
		
		private EntitySet<TimerTask> _TimerTasks;
		
		private EntityRef<TimerProject> _TimerProject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProjectIdChanging(System.Guid value);
    partial void OnProjectIdChanged();
    #endregion
		
		public Workflow()
		{
			this._TimerTasks = new EntitySet<TimerTask>(new Action<TimerTask>(this.attach_TimerTasks), new Action<TimerTask>(this.detach_TimerTasks));
			this._TimerProject = default(EntityRef<TimerProject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._TimerProject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workflow_TimerTask", Storage="_TimerTasks", ThisKey="Id", OtherKey="WorkflowId")]
		public EntitySet<TimerTask> TimerTasks
		{
			get
			{
				return this._TimerTasks;
			}
			set
			{
				this._TimerTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimerProject_Workflow", Storage="_TimerProject", ThisKey="ProjectId", OtherKey="Id", IsForeignKey=true)]
		public TimerProject TimerProject
		{
			get
			{
				return this._TimerProject.Entity;
			}
			set
			{
				TimerProject previousValue = this._TimerProject.Entity;
				if (((previousValue != value) 
							|| (this._TimerProject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimerProject.Entity = null;
						previousValue.Workflows.Remove(this);
					}
					this._TimerProject.Entity = value;
					if ((value != null))
					{
						value.Workflows.Add(this);
						this._ProjectId = value.Id;
					}
					else
					{
						this._ProjectId = default(System.Guid);
					}
					this.SendPropertyChanged("TimerProject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimerTasks(TimerTask entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = this;
		}
		
		private void detach_TimerTasks(TimerTask entity)
		{
			this.SendPropertyChanging();
			entity.Workflow = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowTemplate")]
	public partial class WorkflowTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<WorkflowTemplateToTimerTaskTemplate> _WorkflowTemplateToTimerTaskTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public WorkflowTemplate()
		{
			this._WorkflowTemplateToTimerTaskTemplates = new EntitySet<WorkflowTemplateToTimerTaskTemplate>(new Action<WorkflowTemplateToTimerTaskTemplate>(this.attach_WorkflowTemplateToTimerTaskTemplates), new Action<WorkflowTemplateToTimerTaskTemplate>(this.detach_WorkflowTemplateToTimerTaskTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkflowTemplate_WorkflowTemplateToTimerTaskTemplate", Storage="_WorkflowTemplateToTimerTaskTemplates", ThisKey="Id", OtherKey="WorkflowTemplateId")]
		public EntitySet<WorkflowTemplateToTimerTaskTemplate> WorkflowTemplateToTimerTaskTemplates
		{
			get
			{
				return this._WorkflowTemplateToTimerTaskTemplates;
			}
			set
			{
				this._WorkflowTemplateToTimerTaskTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkflowTemplateToTimerTaskTemplates(WorkflowTemplateToTimerTaskTemplate entity)
		{
			this.SendPropertyChanging();
			entity.WorkflowTemplate = this;
		}
		
		private void detach_WorkflowTemplateToTimerTaskTemplates(WorkflowTemplateToTimerTaskTemplate entity)
		{
			this.SendPropertyChanging();
			entity.WorkflowTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkflowTemplateToTimerTaskTemplate")]
	public partial class WorkflowTemplateToTimerTaskTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _WorkflowTemplateId;
		
		private System.Guid _TimerTaskTemplateId;
		
		private int _TaskOrder;
		
		private string _Notes;
		
		private EntityRef<WorkflowTemplate> _WorkflowTemplate;
		
		private EntityRef<TimerTaskTemplate> _TimerTaskTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnWorkflowTemplateIdChanging(System.Guid value);
    partial void OnWorkflowTemplateIdChanged();
    partial void OnTimerTaskTemplateIdChanging(System.Guid value);
    partial void OnTimerTaskTemplateIdChanged();
    partial void OnTaskOrderChanging(int value);
    partial void OnTaskOrderChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public WorkflowTemplateToTimerTaskTemplate()
		{
			this._WorkflowTemplate = default(EntityRef<WorkflowTemplate>);
			this._TimerTaskTemplate = default(EntityRef<TimerTaskTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowTemplateId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkflowTemplateId
		{
			get
			{
				return this._WorkflowTemplateId;
			}
			set
			{
				if ((this._WorkflowTemplateId != value))
				{
					if (this._WorkflowTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._WorkflowTemplateId = value;
					this.SendPropertyChanged("WorkflowTemplateId");
					this.OnWorkflowTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimerTaskTemplateId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TimerTaskTemplateId
		{
			get
			{
				return this._TimerTaskTemplateId;
			}
			set
			{
				if ((this._TimerTaskTemplateId != value))
				{
					if (this._TimerTaskTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimerTaskTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TimerTaskTemplateId = value;
					this.SendPropertyChanged("TimerTaskTemplateId");
					this.OnTimerTaskTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskOrder", DbType="Int NOT NULL")]
		public int TaskOrder
		{
			get
			{
				return this._TaskOrder;
			}
			set
			{
				if ((this._TaskOrder != value))
				{
					this.OnTaskOrderChanging(value);
					this.SendPropertyChanging();
					this._TaskOrder = value;
					this.SendPropertyChanged("TaskOrder");
					this.OnTaskOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkflowTemplate_WorkflowTemplateToTimerTaskTemplate", Storage="_WorkflowTemplate", ThisKey="WorkflowTemplateId", OtherKey="Id", IsForeignKey=true)]
		public WorkflowTemplate WorkflowTemplate
		{
			get
			{
				return this._WorkflowTemplate.Entity;
			}
			set
			{
				WorkflowTemplate previousValue = this._WorkflowTemplate.Entity;
				if (((previousValue != value) 
							|| (this._WorkflowTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkflowTemplate.Entity = null;
						previousValue.WorkflowTemplateToTimerTaskTemplates.Remove(this);
					}
					this._WorkflowTemplate.Entity = value;
					if ((value != null))
					{
						value.WorkflowTemplateToTimerTaskTemplates.Add(this);
						this._WorkflowTemplateId = value.Id;
					}
					else
					{
						this._WorkflowTemplateId = default(System.Guid);
					}
					this.SendPropertyChanged("WorkflowTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimerTaskTemplate_WorkflowTemplateToTimerTaskTemplate", Storage="_TimerTaskTemplate", ThisKey="TimerTaskTemplateId", OtherKey="Id", IsForeignKey=true)]
		public TimerTaskTemplate TimerTaskTemplate
		{
			get
			{
				return this._TimerTaskTemplate.Entity;
			}
			set
			{
				TimerTaskTemplate previousValue = this._TimerTaskTemplate.Entity;
				if (((previousValue != value) 
							|| (this._TimerTaskTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimerTaskTemplate.Entity = null;
						previousValue.WorkflowTemplateToTimerTaskTemplates.Remove(this);
					}
					this._TimerTaskTemplate.Entity = value;
					if ((value != null))
					{
						value.WorkflowTemplateToTimerTaskTemplates.Add(this);
						this._TimerTaskTemplateId = value.Id;
					}
					else
					{
						this._TimerTaskTemplateId = default(System.Guid);
					}
					this.SendPropertyChanged("TimerTaskTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimerTaskTemplate")]
	public partial class TimerTaskTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<WorkflowTemplateToTimerTaskTemplate> _WorkflowTemplateToTimerTaskTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TimerTaskTemplate()
		{
			this._WorkflowTemplateToTimerTaskTemplates = new EntitySet<WorkflowTemplateToTimerTaskTemplate>(new Action<WorkflowTemplateToTimerTaskTemplate>(this.attach_WorkflowTemplateToTimerTaskTemplates), new Action<WorkflowTemplateToTimerTaskTemplate>(this.detach_WorkflowTemplateToTimerTaskTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimerTaskTemplate_WorkflowTemplateToTimerTaskTemplate", Storage="_WorkflowTemplateToTimerTaskTemplates", ThisKey="Id", OtherKey="TimerTaskTemplateId")]
		public EntitySet<WorkflowTemplateToTimerTaskTemplate> WorkflowTemplateToTimerTaskTemplates
		{
			get
			{
				return this._WorkflowTemplateToTimerTaskTemplates;
			}
			set
			{
				this._WorkflowTemplateToTimerTaskTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkflowTemplateToTimerTaskTemplates(WorkflowTemplateToTimerTaskTemplate entity)
		{
			this.SendPropertyChanging();
			entity.TimerTaskTemplate = this;
		}
		
		private void detach_WorkflowTemplateToTimerTaskTemplates(WorkflowTemplateToTimerTaskTemplate entity)
		{
			this.SendPropertyChanging();
			entity.TimerTaskTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimerTask")]
	public partial class TimerTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _Postmortem;
		
		private System.Nullable<int> _TaskOrder;
		
		private System.Guid _WorkflowId;
		
		private EntityRef<Workflow> _Workflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnPostmortemChanging(string value);
    partial void OnPostmortemChanged();
    partial void OnTaskOrderChanging(System.Nullable<int> value);
    partial void OnTaskOrderChanged();
    partial void OnWorkflowIdChanging(System.Guid value);
    partial void OnWorkflowIdChanged();
    #endregion
		
		public TimerTask()
		{
			this._Workflow = default(EntityRef<Workflow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postmortem", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Postmortem
		{
			get
			{
				return this._Postmortem;
			}
			set
			{
				if ((this._Postmortem != value))
				{
					this.OnPostmortemChanging(value);
					this.SendPropertyChanging();
					this._Postmortem = value;
					this.SendPropertyChanged("Postmortem");
					this.OnPostmortemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskOrder", DbType="Int")]
		public System.Nullable<int> TaskOrder
		{
			get
			{
				return this._TaskOrder;
			}
			set
			{
				if ((this._TaskOrder != value))
				{
					this.OnTaskOrderChanging(value);
					this.SendPropertyChanging();
					this._TaskOrder = value;
					this.SendPropertyChanged("TaskOrder");
					this.OnTaskOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkflowId
		{
			get
			{
				return this._WorkflowId;
			}
			set
			{
				if ((this._WorkflowId != value))
				{
					if (this._Workflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkflowIdChanging(value);
					this.SendPropertyChanging();
					this._WorkflowId = value;
					this.SendPropertyChanged("WorkflowId");
					this.OnWorkflowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workflow_TimerTask", Storage="_Workflow", ThisKey="WorkflowId", OtherKey="Id", IsForeignKey=true)]
		public Workflow Workflow
		{
			get
			{
				return this._Workflow.Entity;
			}
			set
			{
				Workflow previousValue = this._Workflow.Entity;
				if (((previousValue != value) 
							|| (this._Workflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workflow.Entity = null;
						previousValue.TimerTasks.Remove(this);
					}
					this._Workflow.Entity = value;
					if ((value != null))
					{
						value.TimerTasks.Add(this);
						this._WorkflowId = value.Id;
					}
					else
					{
						this._WorkflowId = default(System.Guid);
					}
					this.SendPropertyChanged("Workflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
